---
AWSTemplateFormatVersion: '2010-09-09'
Description: VPC and network configuration for an EKS cluster.

Parameters:

  Name:
    Type: String
    Default: kameshs-gloo-demos
    Description: AWS VPC Name.

  Region:
    Type: String
    Default: ap-south-1
    Description: AWS Region for the VPC.
  
  VpcCidr:
    Type: String
    Default: 172.25.0.0/16
    Description: The CIDR to use for the VPC
  
  SubnetRegiona:
    Type: String
    Default: 172.25.5.0/24
    Description: The CIDR to use for subnet in region Zone A
  
  SubnetRegionb:
    Type: String
    Default: 172.25.6.0/24
    Description: The CIDR to use for subnet in region Zone B

  SubnetRegionc:
    Type: String
    Default: 172.25.7.0/24
    Description: The CIDR to use for subnet in region Zone C

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: { "Ref" : "VpcCidr" }
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: { "Ref" : "Name" }
        - Key: 
            Fn::Sub: 'kubernetes.io/cluster/${Name}'
          Value: shared

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: { "Ref" : "Name" }

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: { "Ref" : "Name" }

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: AttachGateway

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: { "Ref" : "Name" }

  OutboundNetworkAclEntryAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 101
      RuleAction: allow
      Protocol: -1
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  Subnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub: '${Region}a'
      CidrBlock: {"Ref": "SubnetRegiona"}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: '${Name}-subnet-a'
        - Key:  
            Fn::Sub: 'kubernetes.io/cluster/${Name}'
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: 1

  Subnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1a
      RouteTableId: !Ref RouteTable

  Subnet1aNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet1a
      NetworkAclId: !Ref NetworkAcl

  Subnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub: '${Region}b'
      CidrBlock: {"Ref": "SubnetRegionb"}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: '${Name}-subnet-b'
        - Key:  
            Fn::Sub: 'kubernetes.io/cluster/${Name}'
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: 1

  Subnet1bRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1b
      RouteTableId: !Ref RouteTable

  Subnet1bNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet1b
      NetworkAclId: !Ref NetworkAcl

  Subnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub: '${Region}c'
      CidrBlock: {"Ref": "SubnetRegionc"}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
           Fn::Sub: '${Name}-subnet-c'
        - Key:  
            Fn::Sub: 'kubernetes.io/cluster/${Name}'
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: 1

  Subnet1cRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1c
      RouteTableId: !Ref RouteTable

  Subnet1cNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet1c
      NetworkAclId: !Ref NetworkAcl

  SGGlooK8sIngress:
   Type: 'AWS::EC2::SecurityGroup'
   Properties:
      GroupDescription: Gloo Security Group
      VpcId: !Ref VPC
      GroupName: 
          Fn::Sub: '${Name}-security-group'
      SecurityGroupIngress:
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 80
           ToPort: 80
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 443
           ToPort: 443
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 8080
           ToPort: 8080
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 8443
           ToPort: 8443
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 9900
           ToPort: 9900
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 15021
           ToPort: 15021
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 15443
           ToPort: 15443
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 15012
           ToPort: 15012
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 15012
           ToPort: 15017
Outputs:

  VpcId:
    Description: VPC id
    Value: !Ref VPC

  SecurityGroupId:
    Description: Security Group id
    Value: !Ref SGGlooK8sIngress

  Subnets:
    Description: List of Subnets in the VPC
    Value:
      Fn::Sub: '${Subnet1a},${Subnet1b},${Subnet1c}'