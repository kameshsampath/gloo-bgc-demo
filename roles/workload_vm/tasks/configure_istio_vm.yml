- name: "Clean existing Istio VM files"
  include: clean_istio_vm_files.yml
  when: clean_istio_vm_files

- name: "Lookup Istio Ingress Gateway"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    namespace: istio-system
    name: istio-ingressgateway
    context: "{{ gloo_mesh.cluster1.k8s_context }}"
  environment:
    KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"
  register: istio_ingress_gw_result

- name: "Get LoadBalancer Address"
  set_fact:
    ingress_gw_lb_addr: "{{ istio_ingress_gw_result.resources[0] | community.general.json_query('status.loadBalancer.ingress[*]')}}"

# - debug:
#     var: ingress_gw_lb_addr

- name: "A record (IPV4 address) lookup for LoadBalancer"
  set_fact:
    lb_ips: "{{ lookup('community.general.dig',ingress_gw_lb_addr[0].hostname) | split(',') }}"
    multi_lb: True
  when: ingress_gw_lb_addr[0].hostname is defined and ingress_gw_lb_addr | length > 0

- name: "Set LoadBalancer IP"
  set_fact:
    lb_ips: "{{ ingress_gw_lb_addr[0].ip }}"
    one_lb: True
  when: ingress_gw_lb_addr[0].ip is defined and ingress_gw_lb_addr | length > 0

# - name: "Debug Istio Ingress LB IPs"
#   debug:
#     var: lb_ips

- name: "Remove istiod entry from hosts file"
  become: yes
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    path: "/etc/hosts"
    block: |
      {%if one_lb %}
      {{ lb_ips }}   istiod.istio-system.svc istiod.istio-system.svc.cluster.local      
      {% elif multi_lb %}
      {{ lb_ips[0] }}   istiod.istio-system.svc istiod.istio-system.svc.cluster.local
      {{ lb_ips[1] }}   istiod.istio-system.svc istiod.istio-system.svc.cluster.local
      {% endif %}
    state: absent
  when: clean_istio_vm_files 
  notify:
  - "Kill Envoy"
  - "Restart Istio"

- name: "Add istiod entry to hosts file"
  become: yes
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    path: "/etc/hosts"
    block: |
      {%if one_lb %}
      {{ lb_ips }}   istiod.istio-system.svc istiod.istio-system.svc.cluster.local      
      {% elif multi_lb %}
      {{ lb_ips[0] }}   istiod.istio-system.svc istiod.istio-system.svc.cluster.local
      {{ lb_ips[1] }}   istiod.istio-system.svc istiod.istio-system.svc.cluster.local
      {% endif %}
  notify:
  - "Kill Envoy"
  - "Restart Istio"

- name: "Create or Update VM Workload Namespace"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_mesh.cluster1.k8s_context }}"
    template:
      path: 'istio/namespace.yaml.j2'
  environment:
    KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"

- name: "Create or Update VM Workload ServiceAccount"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_mesh.cluster1.k8s_context }}"
    template:
      path: 'istio/sa.yaml.j2'
  environment:
    KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"
    
- name: "Create or Update VM Workload in Cluster"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_mesh.mgmt.k8s_context }}"
    template:
      path: 'istio/workload.yaml.j2'
  environment:
    KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"

- name: "Create or Update VM Destination in Cluster"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_mesh.mgmt.k8s_context }}"
    template:
      path: 'istio/destination.yaml.j2'
  environment:
    KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"


- name: "Create or Update VM Workload Service in Cluster"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_mesh.cluster1.k8s_context }}"
    template:
      path: 'istio/service.yaml.j2'
  environment:
    KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"

- name: "Create or Update VM Workload Entry in Cluster"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_mesh.cluster1.k8s_context }}"
    template:
      path: 'istio/workload-entry.yaml.j2'
  environment:
    KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"

- name: "Create Istio Work Dir"
  file:
    path: "{{ istio_vm_workdir }}"
    recurse: True
    state: directory

- name: "Create workload YAML"
  template:
    dest: "{{ istio_vm_workdir }}/workload-group.yaml"
    src: "istio/workload-group.yaml.j2"

- name: "Generate Workload Files"
  ansible.builtin.command:
    argv:
      - "{{ ansible_env.HOME }}/istio-{{ istio_version }}/bin/istioctl"
      - "--context"
      - "{{ istio_cluster }}"
      - x
      - workload
      - entry
      - configure
      - "--file"
      - "{{ istio_vm_workdir }}/workload-group.yaml"
      - "--output"
      - "{{ istio_vm_workdir }}"
      - "--clusterID"
      - "{{ istio_cluster }}"
      - "--kubeconfig"
      - "{{ ansible_env.HOME }}/.kube/config"
      - "--context"
      - "{{ gloo_mesh.cluster1.k8s_context }}"
  register: workload_entry_create

- name: "Install Istio Sidecar(Debian)"
  become: yes
  ansible.builtin.apt:
    deb: "https://storage.googleapis.com/istio-release/releases/{{ istio_version }}/deb/istio-sidecar.deb"
  when: ansible_os_family == "Debian"

- name: "Install Istio Sidecar(RedHat)"
  become: yes
  ansible.builtin.dnf:
    name: "https://storage.googleapis.com/istio-release/releases/{{ istio_version }}/rpm/istio-sidecar.rpm"
    disable_gpg_check: yes
  when: ansible_os_family == "RedHat"

- name: "Enable Istio"
  become: yes
  service:
    name: istio
    enabled: true

- name: "Copy Envoy kill script"
  become: yes
  copy:
    src: "killEnvoy.sh"
    dest: "/usr/local/bin/killEnvoy.sh"
    mode: 755

- name: "Create Required Directories"
  become: yes
  file:
    state: directory
    path: "{{ item }}"
  with_items:
    - /etc/certs
    - /var/run/secrets/tokens
    - /etc/istio/proxy

- name: "Set ISTIO_SVC_IP"
  become: yes
  lineinfile:
    backup: yes
    path: /etc/istio/envoy/sidecar.env
    regexp: "^# ISTIO_SVC_IP=.*$"
    line: "ISTIO_SVC_IP={{ istio_svc_ip }}"

- name: "Install the root certificate root-cert.pem"
  become: yes
  copy:
    src: "{{ istio_vm_workdir }}/root-cert.pem"
    dest: /etc/certs/root-cert.pem
    remote_src: yes
  notify:
  - "Kill Envoy"
  - "Restart Istio"

- name: "Install the token istio-token"
  become: yes
  copy:
    src: "{{ istio_vm_workdir }}/istio-token"
    dest: /var/run/secrets/tokens/istio-token
    remote_src: yes
  notify:
  - "Kill Envoy"
  - "Restart Istio"

- name: "Install cluster.env"
  become: yes
  copy:
    src: "{{ istio_vm_workdir }}/cluster.env"
    dest: /var/lib/istio/envoy/cluster.env
    remote_src: yes
  notify:
  - "Kill Envoy"
  - "Restart Istio"

- name: "Install the Mesh Config"
  become: yes
  copy:
    src: "{{ istio_vm_workdir }}/mesh.yaml"
    dest: /etc/istio/config/mesh
    remote_src: yes
  notify:
  - "Kill Envoy"
  - "Restart Istio"

- name: "Set Right Ownership on file {{ item }}"
  become: yes
  file:
    dest: "{{ item }}"
    owner: "istio-proxy"
  with_items:
    - /etc/certs/root-cert.pem
  loop_control:
    label: "{{ item }}"

- name: "Set Right Ownership on {{ item }} directories"
  become: yes
  file:
    dest: "{{ item }}"
    recurse: yes
    owner: "istio-proxy"
  with_items:
    - /var/lib/istio
    - /etc/certs
    - /etc/istio/proxy
    - /etc/istio/config
    - /var/run/secrets
  loop_control:
    label: "{{ item }}"

